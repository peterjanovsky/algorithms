#include <assert.h>
#include <stdio.h>

#include "insertion_sort.c"
#include "merge_sort.c"
#include "bubble_sort.c"
#include "find_maximum_subarray.c"
//#include "heapsort.c"

#define SIZE_OF_SMALL_ARRAY   6
#define SIZE_OF_MEDIUM_ARRAY  10
#define SIZE_OF_LARGE_ARRAY   16

#define INCOMING              1
#define REPLY                 1 << 1
#define API                   1 << 2
#define CALL                  1 << 3
#define ENCODED_CORRECTLY     1 << 4
#define HAS_CONTENT           1 << 5
#define MESSAGES_API          1 << 6
#define SMART_ENCODED         1 << 8
#define DELIVERED_AS_MMS      1 << 9
#define SENT_BY_APPLICATION   1 << 10
#define ALPHA_SENDER_ID       1 << 11
#define SHORTCODE             1 << 12
#define USED_URL_SHORTENER    1 << 13
#define SMPP                  1 << 14
#define OTT                   1 << 15
#define INTRANATIONAL         1 << 16
#define ORIGIN_BASED_ROUTE    1 << 17
#define PREREGISTERED         1 << 18
#define INCOMPLETE            1 << 19

int main()
{
    printf("insertion sort\n");

    int sorted[SIZE_OF_SMALL_ARRAY] = { 1, 2, 3, 4, 5, 6 };
    int sortable[SIZE_OF_SMALL_ARRAY] = { 5, 2, 4, 6, 1, 3 };

    int *result = insertion_sort( sortable, SIZE_OF_SMALL_ARRAY );
    for ( int i=0; i < SIZE_OF_SMALL_ARRAY; i++ )
    {
        printf("expected: %d actual: %d\n", sorted[i], result[i]);
        assert( sorted[i] == result[i] );
    }

    printf("merge sort\n");

    int sortedMerge[SIZE_OF_LARGE_ARRAY] = { 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 2, 3, 4, 5, 6, 7 };
    int sortableMerge[SIZE_OF_LARGE_ARRAY] = { 1, 2, 3, 4, 5, 6, 7, 8, 2, 4, 5, 7, 1, 2, 3, 6 };

    int *resultMerge = merge_sort( sortableMerge, 8, 11, 15);
    for ( int i=-0; i < SIZE_OF_LARGE_ARRAY; i++ )
    {
        printf("expected: %d actual: %d\n", sortedMerge[i], resultMerge[i]);
        assert( sortedMerge[i] == resultMerge[i] );
    }

    printf("bubble sort\n");

    int sortedBubble[SIZE_OF_SMALL_ARRAY] = { 1, 2, 3, 4, 5, 6 };
    int sortableBubble[SIZE_OF_SMALL_ARRAY] = { 2, 5, 4, 6, 3, 1 };

    int *resultBubble = bubble_sort( sortableBubble, SIZE_OF_SMALL_ARRAY );
    for ( int i=0; i < SIZE_OF_SMALL_ARRAY; i++ )
    {
        printf("expected: %d actual: %d\n", sortedBubble[i], resultBubble[i]);
        assert( sortedBubble[i] == resultBubble[i] );
    }

    printf("maximum crossing subarray\n");

    int sortableCrossingSmall[SIZE_OF_SMALL_ARRAY] = { -6, 5, 2, -3, 7, 1 };

    tuple tupSmall = find_max_crossing_subarray( sortableCrossingSmall, 0, 3, 6 );
    printf("tuple max_left: %d max_right: %d sum: %d\n", tupSmall.max_left, tupSmall.max_right, tupSmall.sum);
    assert( tupSmall.max_left == 1 );
    assert( tupSmall.max_right == 5 );
    assert( tupSmall.sum == 12 );

    int sortableCrossingMedium[SIZE_OF_MEDIUM_ARRAY] = { -6, 5, 2, -3, 7, 1, -5, 8, -4, -9 };

    tuple tupMedium = find_max_crossing_subarray( sortableCrossingMedium, 0, 5, 10 );
    printf("tuple max_left: %d max_right: %d sum: %d\n", tupMedium.max_left, tupMedium.max_right, tupMedium.sum);
    assert( tupMedium.max_left == 1 );
    assert( tupMedium.max_right == 7 );
    assert( tupMedium.sum == 15 );

    printf("maximum subarray\n");

    int sortableSingleElem[1] = { -6 };

    tuple tupSingleElem = find_max_subarray( sortableSingleElem, 0, 0 );
    printf("tuple max_left: %d max_right: %d sum: %d\n", tupSingleElem.max_left, tupSingleElem.max_right, tupSingleElem.sum);
    assert( tupSingleElem.max_left == 0 );
    assert( tupSingleElem.max_right == 0 );
    assert( tupSingleElem.sum == -6 );

    int sortableMax[SIZE_OF_SMALL_ARRAY] = { -6, 5, 2, -3, 7, 1 };

    tuple tupMax = find_max_subarray( sortableMax, 0, 6 );
    printf("tuple max_left: %d max_right: %d sum: %d\n", tupMax.max_left, tupMax.max_right, tupMax.sum);
    assert( tupMax.max_left == 1 );
    assert( tupMax.max_right == 5 );
    assert( tupMax.sum == 12 );

    printf("heapsort\n");

    // Decimal 0  1   2    3    4    5    6    7     8     9    10    11    12    13    14    15
    // Binary  0  1  10   11  100  101  110  111  1000  1001  1010  1011  1100  1101  1110  1111

/*
 *          ---------------------------------------------------------------
 * value    |  16 |  14  |  10  |  8  |  7  |  9  |  3  |  2  |  4  |  1  |
 *          ---------------------------------------------------------------
 * offset   |  0  |  1   |  2   |  3  |  4  |  5  |  6  |  7  |  8  |  9  |
 *          ---------------------------------------------------------------
 */

/*
    int offset = left(0);
    printf("shift left by 1 with result of %d\n", offset);

    assert( left(0) == 1 );
    assert( left(1) == 3 );
    assert( left(2) == 5 );
    assert( left(3) == 7 );
    assert( left(4) == 9 );
    assert( left(5) == 11 );

    offset = right(0);
    printf("shift left by 1 + 1 with result of %d\n", offset);

    assert( right(0) == 2 );
    assert( right(1) == 4 );
    assert( right(2) == 6 );
    assert( right(3) == 8 );
    assert( right(4) == 10 );
    assert( right(5) == 12 );

//    offset = parent(1);
//    printf("shift right by 1 with result of %d\n", offset);

//    assert( offset == 14 );

    //int arr[10] = { 4, 16, 14, 10, 8, 7, 9, 3, 2, 1 };
    int arr[10] = { 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 };
    heap h;
    h.length = 10;
    h.size = 10;
    h.array = arr;

    printf("heap len: %d size: %d\n", h.length, h.size);
    for (int i=0; i < 10; i++)
        printf("offset: %d value: %d\n", i, h.array[i]);

    //max_heapify(&h, 0);
    build_max_heap(&h);

    printf("heap len: %d size: %d\n", h.length, h.size);
    for (int i=0; i < 10; i++)
        printf("offset: %d value: %d\n", i, h.array[i]);

    int expected[10] = { 16, 14, 10, 8, 7, 9, 3, 2, 4, 1 };
    for (int i=0; i < 10; i++)
        assert( h.array[i] == expected[i] );






    int arr2[10] = { 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 };
    heap h2;
    h2.length = 10;
    h2.size = 10;
    h2.array = arr2;

    printf("heapsort heap len: %d size: %d\n", h2.length, h2.size);
    for (int i=0; i < 10; i++)
        printf("offset: %d value: %d\n", i, h2.array[i]);

    heap_sort(&h2);

    printf("heapsort heap len: %d size: %d\n", h2.length, h2.size);
    for (int i=0; i < 10; i++)
        printf("offset: %d value: %d\n", i, h2.array[i]);

    int expected2[10] = { 1, 2, 3, 4, 7, 8, 9, 10, 14, 16 };
    for (int i=0; i < 10; i++)
        assert( h2.array[i] == expected2[i] );




    int arr3[10] = { 16, 14, 10, 8, 7, 9, 3, 2, 4, 1 };
    heap h3;
    h3.length = 10;
    h3.size = 10;
    h3.array = arr3;

    assert( arr3[0] == heap_maximum(h3) );




    int arr4[10] = { 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 };
    heap h4;
    h4.length = 10;
    h4.size = 10;
    h4.array = arr4;

    build_max_heap(&h4);
    int max = heap_extract_max(&h4);

    printf("max from heap: %d\n", max);

    assert( 16 == max );

    printf("max heap with len: %d size: %d\n", h4.length, h4.size);
    for (int i=0; i < h4.size; i++)
        printf("offset: %d value: %d\n", i, h4.array[i]);

    int expected4[9] = { 14, 8, 10, 4, 7, 9, 3, 2, 1 };
    for (int i=0; i < h4.size; i++)
        assert( h4.array[i] == expected4[i] );




    int arr4[10] = { 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 };
    heap h4;
    h4.length = 10;
    h4.size = 10;
    h4.array = arr4;

    build_max_heap(&h4);
    int max = heap_extract_max(&h4);

    printf("max from heap: %d\n", max);

    assert( 16 == max );

    printf("max heap with len: %d size: %d\n", h4.length, h4.size);
    for (int i=0; i < h4.size; i++)
        printf("offset: %d value: %d\n", i, h4.array[i]);

    int expected4[9] = { 14, 8, 10, 4, 7, 9, 3, 2, 1 };
    for (int i=0; i < h4.size; i++)
        assert( h4.array[i] == expected4[i] );
*/



  unsigned int a = 60;
  unsigned int b = 13;
  int c = 0;

  c = a & b;
  printf("value of c is %d\n", c);

  c = a | b;
  printf("value of c is %d\n", c);

  c = a ^ b;
  printf("value of c is %d\n", c);

  c = ~a;
  printf("value of c is %d\n", c);

  c = a << 2;
  printf("value of c is %d\n", c);

  c = a >> 2;
  printf("value of c is %d\n", c);

  c = 1 << 1;
  printf("value of c after applying binary left shift operator is %d\n", c);

  c = 1 << 2;
  printf("value of c after applying binary left shift operator is %d\n", c);

  c = 1 << 3;
  printf("value of c after applying binary left shift operator is %d\n", c);

  c = INCOMING | ENCODED_CORRECTLY;
  printf("value of c after applying binary left shift operator is %d\n", c);
}
